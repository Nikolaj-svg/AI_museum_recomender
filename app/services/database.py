import chromadb
import requests
from googletrans import Translator
from sentence_transformers import SentenceTransformer
from app.services.wikidata import search_artworks_by_museum

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
model = SentenceTransformer("all-MiniLM-L6-v2")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º ChromaDB (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–µ–∫—Ç–æ—Ä–æ–≤)
db = chromadb.PersistentClient(path="data/chroma_db")
collection = db.get_or_create_collection(name="museum_data")

translator = Translator()

def translate_query(query):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º"""
    translated = translator.translate(query, src="ru", dest="en")
    return translated.text

def save_artworks_from_museum(museum_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑ Wikidata –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ ChromaDB"""
    artworks = search_artworks_by_museum(museum_name)
    
    if "error" in artworks:
        return artworks  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –º—É–∑–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω

    for art in artworks:
        title = art["title"]
        description = f"{art['title']} ‚Äî –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ {art['artist']}."
        museum = art["museum"]
        
        embedding = model.encode(description).tolist()
        collection.add(
            documents=[description],
            metadatas=[{"title": title, "museum": museum, "artist": art["artist"]}],
            embeddings=[embedding],
            ids=[str(title)]
        )

    return {"message": f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(artworks)} –∫–∞—Ä—Ç–∏–Ω –∏–∑ {museum_name} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."}

def search_artwork(query, top_k=5):
    """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω –ø–æ –±–∞–∑–µ (—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π)"""

    query_en = translate_query(query)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    query_embedding = model.encode(query_en).tolist()

    if collection.count() == 0:
        return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω—ã!"}

    results = collection.query(query_embeddings=[query_embedding], n_results=top_k, include=["documents", "metadatas", "distances"])

    response = []
    if results["documents"]:
        for i in range(len(results["documents"][0])):  
            metadata = results["metadatas"][0][i]  
            title = metadata.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            
            # üìå –£–ª—É—á—à–∞–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Mona Lisa, –ø–æ–¥–Ω–∏–º–∞–µ–º –≤—ã—à–µ
            boost = 0
            if "mona lisa" in title.lower():
                boost = -1  # –ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ

            response.append({
                "title": title,
                "museum": metadata.get("museum", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "artist": metadata.get("artist", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"),
                "description": results["documents"][0][i],
                "distance": results["distances"][0][i] + boost  # –£–ª—É—á—à–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            })

    # üî• –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ (—É—á–∏—Ç—ã–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Mona Lisa)
    response.sort(key=lambda x: x["distance"])

    return response if response else {"error": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}

