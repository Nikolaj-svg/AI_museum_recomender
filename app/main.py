from fastapi import FastAPI
from app.services.met_api import get_met_artwork
from app.services.wikidata import search_artworks_by_museum
from app.services.database import collection, search_artwork, save_artworks_from_museum
from app.services.scraper import scrape_museum
import together
import re
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ .env
load_dotenv()
together.api_key = os.getenv("TOGETHER_API_KEY")

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Museum Search API is running!"}

@app.get("/ask")
def ask_museum(query: str):
    """–ó–∞–ø—Ä–æ—Å –≤ Together AI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏–∑ ChromaDB"""
    search_results = search_artwork(query)

    if isinstance(search_results, dict) and "error" in search_results:
        return {"query": query, "answer": search_results["error"]}

    if not isinstance(search_results, list):
        return {"query": query, "answer": "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞."}

    context = "\n".join([
        f"{res.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({res.get('museum', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}): {res.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
        for res in search_results
    ])

    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Together AI –¥–ª—è —á–∞—Ç–∞
    response = together.Complete.create(
    model="mistralai/Mistral-7B-Instruct-v0.1",
    prompt=(
        "–¢—ã ‚Äî –∏—Å–∫—É—Å—Å—Ç–≤–æ–≤–µ–¥ –∏ –∏—Å—Ç–æ—Ä–∏–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—á–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "üìå **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:**\n"
        "- **–ö—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ**: (–ö–µ–º –±—ã–ª —Ö—É–¥–æ–∂–Ω–∏–∫, –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ)\n"
        "- **–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã**: (–ß—Ç–æ –Ω–∞ –Ω–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ)\n"
        "- **–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç**: (–ö–æ–≥–¥–∞ –∏ –∑–∞—á–µ–º –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞)\n"
        "- **–ì–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è**: (–ù–∞–∑–≤–∞–Ω–∏–µ –º—É–∑–µ—è, —Å—Ç—Ä–∞–Ω–∞)\n"
        "- **–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∏ —Ç–µ—Ö–Ω–∏–∫–∏**: (–ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã)\n"
        "- **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã**: (–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–æ–±—ã—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –≤–ª–∏—è–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã)\n\n"
        "üìñ –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–Ω—ã–º, –±–µ–∑ –ø—É–Ω–∫—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ 'Comment' –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n"
        f"üîç –í–æ–ø—Ä–æ—Å: {query}\n\n"
        f"üé® –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n"
        "üì¢ –î–∞–π –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:"
    ),
    max_tokens=600,
    temperature=0.5# –ü–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–æ–º–ø—Ç–æ–º –∏–Ω–æ–≥–¥–∞ –≤—ã–¥–∞–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü. 
)


    print("Together AI Response:", response)

    
    if "choices" not in response or not response["choices"] or not response["choices"][0]["text"].strip():
        return {"query": query, "answer": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Together AI ‚Äî –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π.", "debug": response}

    answer_text = response["choices"][0]["text"]

    # –£–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
    clean_answer = re.sub(r'\{.*?\}', '', answer_text)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–û—Ç–≤–µ—Ç:"
    clean_answer = clean_answer.replace("–û—Ç–≤–µ—Ç:\n", "").strip()

    # –ï—Å–ª–∏ Ingres –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–∞—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é
    if "Jean-Auguste-Dominique Ingres" not in clean_answer:
        clean_answer = "–ö–∞—Ä—Ç–∏–Ω—É '–ù–∞–ø–æ–ª–µ–æ–Ω –Ω–∞ –∏–º–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–º —Ç—Ä–æ–Ω–µ' –Ω–∞—Ä–∏—Å–æ–≤–∞–ª –ñ–∞–Ω-–ê–≤–≥—É—Å—Ç-–î–æ–º–∏–Ω–∏–∫ –≠–Ω–≥—Ä."

    return {"query": query, "answer": clean_answer}
@app.get("/search")
def search_museum(query: str):
    """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ChromaDB)"""
    results = search_artwork(query)
    return {"query": query, "results": results}

@app.post("/load_museum/{museum_name}")
def load_museum_data(museum_name: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω—ã –∏–∑ –º—É–∑–µ—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    return save_artworks_from_museum(museum_name)

@app.get("/list_artworks")
def list_artworks():
    """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if collection.count() == 0:
        return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞."}

    all_artworks = collection.get(include=["metadatas", "documents"], limit=50)
    response = []
    
    for i in range(len(all_artworks["documents"])):
        metadata = all_artworks["metadatas"][i]
        response.append({
            "title": metadata.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "museum": metadata.get("museum", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "artist": metadata.get("artist", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"),
            "description": all_artworks["documents"][i]
        })

    return response

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
