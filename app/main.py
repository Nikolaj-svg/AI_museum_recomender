from fastapi import FastAPI
from app.services.database import collection, search_artwork, save_artworks_from_museum
import together
import re
import os
from dotenv import load_dotenv

load_dotenv()
together.api_key = os.getenv("TOGETHER_API_KEY")

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Museum Search API is running!"}

def filter_relevant_info(search_results):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """
    filtered = []
    for res in search_results:
        if res.get('description'):  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            filtered.append({
                "title": res.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                "museum": res.get("museum", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "description": res["description"]
            })
    
    return filtered[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

@app.get("/clarify")
def clarify_query(query: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã"""
    
    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    query_lower = query.lower()
    
    keywords_painting = ["–∫–∞—Ä—Ç–∏–Ω–∞", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ", "–∞–≤—Ç–æ—Ä", "—Å—Ç–∏–ª—å"]
    keywords_artist = ["—Ö—É–¥–æ–∂–Ω–∏–∫", "–∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã", "–Ω–∞–ø–∏—Å–∞–ª", "—Ç–µ—Ö–Ω–∏–∫–∏", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è"]
    keywords_museum = ["–º—É–∑–µ–π", "—ç–∫—Å–ø–æ–∑–∏—Ü–∏—è", "–Ω–∞—Ö–æ–¥–∏—Ç—Å—è", "—Å–æ–±—Ä–∞–Ω–∏–µ"]
    
    # 2Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞
    if any(word in query_lower for word in keywords_painting):
        return {"query": query, "answer": "–í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –æ –∫–∞—Ä—Ç–∏–Ω–µ, –Ω–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–ø–æ–ª–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å!"}
    
    if any(word in query_lower for word in keywords_artist):
        return {"query": query, "answer": "–í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –æ —Ö—É–¥–æ–∂–Ω–∏–∫–µ! –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã?"}

    if any(word in query_lower for word in keywords_museum):
        return {"query": query, "answer": "–í—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –æ –º—É–∑–µ–µ! –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã —Ç–∞–º –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã?"}

    # 3Ô∏è‚É£ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–æ–≤—Å–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–¥–µ–∏
    random_suggestions = [
        "–ö–∞–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–¥–µ–π?",
        "–ö–∞–∫ —Ö—É–¥–æ–∂–Ω–∏–∫–∏ —ç–ø–æ—Ö–∏ –†–µ–Ω–µ—Å—Å–∞–Ω—Å–∞ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã?",
        "–ö–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–∞–º—ã–º–∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–º–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏?",
        "–ö–∞–∫–æ–π –º—É–∑–µ–π —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?",
    ]

    return {
        "query": query,
        "answer": "–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞–∂–µ—Ç—Å—è –Ω–µ–æ–±—ã—á–Ω—ã–º! –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞?",
        "suggestions": random_suggestions
    }


@app.get("/ask")
def ask_museum(query: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö + Together AI"""

    # 1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ —á–µ–º —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç (–∫–∞—Ä—Ç–∏–Ω–∞, —Ö—É–¥–æ–∂–Ω–∏–∫, –º—É–∑–µ–π, –±–∏–æ–≥—Ä–∞—Ñ–∏—è, –∏—Å—Ç–æ—Ä–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ —Ç.–¥.)
    query_lower = query.lower()
    query_type = None

    if "–∫—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–ª" in query_lower or "–∞–≤—Ç–æ—Ä" in query_lower:
        query_type = "artist"
    elif "–∫–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–∞–ø–∏—Å–∞–ª" in query_lower:
        query_type = "artist_paintings"
    elif "—á—Ç–æ —ç–∫—Å–ø–æ–Ω–∏—Ä—É–µ—Ç—Å—è" in query_lower or "–∫–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –µ—Å—Ç—å" in query_lower:
        query_type = "museum_paintings"
    elif "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–∞—Ä—Ç–∏–Ω—É" in query_lower:
        query_type = "artwork"
    elif "–∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª" in query_lower:
        query_type = "artist_info"
    elif "–±–∏–æ–≥—Ä–∞—Ñ–∏—è" in query_lower or "–∫–µ–º –±—ã–ª" in query_lower or "–±–∏–æ–≥—Ä–∞—Ñ–∏—é" in query_lower or "–∫–∞—Ä—å–µ—Ä–∞" in query_lower or "–∫–∞—Ä—å–µ—Ä—É" in query_lower:
        query_type = "artist_biography"
    elif "–∫–∞–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞" in query_lower or "—Å–∞–º–∞—è –∑–∞–≥–∞–¥–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞" in query_lower:
        query_type = "art_mystery"
    elif "–∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Ä–∞–±–æ—Ç—ã" in query_lower or "—ç–ø–æ—Ö–∞ —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å–∞" in query_lower:
        query_type = "art_history"
    elif "–∫–∞–∫–æ–π –º—É–∑–µ–π —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å" in query_lower:
        query_type = "museum_recommendation"

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª–∏ ‚Äî –∏–¥–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if query_type is None:
        return clarify_query(query)

    # 2Ô∏è‚É£ –ò—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ChromaDB
    search_results = search_artwork(query)
    filtered_results = filter_relevant_info(search_results)

    if filtered_results:
        context = "\n".join([
            f"{res['title']} ({res['museum']}): {res['description']}"
            for res in filtered_results
        ])
    else:
        context = "–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—Ç—å –ø–æ –æ–±—â–∏–º –∑–Ω–∞–Ω–∏—è–º."

    # 3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ Together AI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    query_prompts = {
        "artist": f"–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∫–∞—Ä—Ç–∏–Ω—ã '{query}'? –î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å –±–∏–æ–≥—Ä–∞—Ñ–∏–µ–π —Ö—É–¥–æ–∂–Ω–∏–∫–∞.",
        "artist_paintings": f"–ö–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–∞–ø–∏—Å–∞–ª —Ö—É–¥–æ–∂–Ω–∏–∫ {query.replace('–∫–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–∞–ø–∏—Å–∞–ª ', '')}? –î–∞–π —Å–ø–∏—Å–æ–∫ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.",
        "museum_paintings": f"–ö–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ –º—É–∑–µ–µ {query.replace('—á—Ç–æ —ç–∫—Å–ø–æ–Ω–∏—Ä—É–µ—Ç—Å—è –≤ ', '')}? –î–∞–π —Å–ø–∏—Å–æ–∫ —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.",
        "artwork": f"–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–∞—Ä—Ç–∏–Ω—É '{query.replace('—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–∞—Ä—Ç–∏–Ω—É ', '')}'. –î–∞–π –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–∑–¥–∞–Ω–∏—è, —Å—Ç–∏–ª–µ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º.",
        "artist_info": f"–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ö—É–¥–æ–∂–Ω–∏–∫ {query.replace('–∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª ', '')}? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ.",
        "artist_biography": f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –∂–∏–∑–Ω–∏ –∏ –∫–∞—Ä—å–µ—Ä–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ {query.replace('–±–∏–æ–≥—Ä–∞—Ñ–∏—è ', '').replace('—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ ', '')}.",
        "art_mystery": "–ö–∞–∫–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–∞–º—ã–º–∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–º–∏? –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É.",
        "art_history": "–ö–∞–∫ —Ö—É–¥–æ–∂–Ω–∏–∫–∏ —ç–ø–æ—Ö–∏ –†–µ–Ω–µ—Å—Å–∞–Ω—Å–∞ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã? –û–ø–∏—à–∏ –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤–ª–∏—è–Ω–∏–µ.",
        "mona_lisa": "–ü–æ—á–µ–º—É –∫–∞—Ä—Ç–∏–Ω–∞ ¬´–ú–æ–Ω–∞ –õ–∏–∑–∞¬ª —Å—Ç–∞–ª–∞ —Ç–∞–∫–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ–π? –î–∞–π –∫—Ä–∞—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.",
        "museum_recommendation": "–ö–∞–∫–æ–π –º—É–∑–µ–π —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º?"
    }
    
    prompt = query_prompts.get(query_type, f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {query}. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    if "–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" in context:
        prompt = f"–û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É '{query}' —Å –Ω—É–ª—è, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤—É."

    # 4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Together AI
    response = together.Complete.create(
        model="mistralai/Mistral-7B-Instruct-v0.1",
        prompt=(
            "–¢—ã ‚Äî –∏—Å–∫—É—Å—Å—Ç–≤–æ–≤–µ–¥ –∏ –∏—Å—Ç–æ—Ä–∏–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—á–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
            f"üîç –í–æ–ø—Ä–æ—Å: {query}\n\n"
            f"üé® –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n"
            "üì¢ –î–∞–π –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç **–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**:"
        ),
        max_tokens=600,
        temperature=0.5
    )

    print("Together AI Response:", response)

    if "choices" not in response or not response["choices"] or not response["choices"][0]["text"].strip():
        return {"query": query, "answer": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Together AI ‚Äî –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π.", "debug": response}

    answer_text = response["choices"][0]["text"]

    # 5Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∫–æ–±–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    clean_answer = re.sub(r'\{.*?\}', '', answer_text).strip()

    return {"query": query, "answer": clean_answer}




@app.get("/search")
def search_museum(query: str):
    """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ChromaDB)"""
    results = search_artwork(query)
    return {"query": query, "results": results}

@app.post("/load_museum/{museum_name}")
def load_museum_data(museum_name: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω—ã –∏–∑ –º—É–∑–µ—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    return save_artworks_from_museum(museum_name)

@app.get("/list_artworks")
def list_artworks():
    """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if collection.count() == 0:
        return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞."}

    all_artworks = collection.get(include=["metadatas", "documents"], limit=50)
    response = []
    
    for i in range(len(all_artworks["documents"])):
        metadata = all_artworks["metadatas"][i]
        response.append({
            "title": metadata.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "museum": metadata.get("museum", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "artist": metadata.get("artist", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"),
            "description": all_artworks["documents"][i]
        })

    return response

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
